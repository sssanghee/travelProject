package com.travel.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.io.IOUtils;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.travel.model.Board;
import com.travel.model.Comment;
import com.travel.model.Like;
import com.travel.service.BoardService;
import com.travel.service.FileService;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/board")
public class BoardController {
	
	@Value("${file.path")
	private String fileRealPath;

	@Autowired
	BoardService boardService;
	
	@Autowired
	FileService fileService;
	
	@PostMapping("/uploadBoard")
	public ResponseEntity<String> uploadBoard(@RequestBody Board board){
		try {
			String result = boardService.uploadBoard(board);
			
			return new ResponseEntity<>(result, HttpStatus.OK);
		} catch(Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@PostMapping(value="/uploadImage", produces = MediaType.IMAGE_JPEG_VALUE)
	public ResponseEntity<?> uploadImage(
//			@RequestParam(value="file", required=false) 
			@ModelAttribute MultipartFile file) {
		System.out.println("컨트롤러 진입");
//		System.out.println(file);
//		System.out.println(file.getOriginalFilename());
//		System.out.println(file.getContentType());
//		System.out.println(file.getSize());
//		System.out.println(file.getName());
		UUID uuid = UUID.randomUUID();
		String uuidFilename = uuid + "_" + file.getOriginalFilename();
		String samplePath = "F///C:/studyStored/"+uuidFilename;
		System.out.println(samplePath);
		try {
			file.transferTo(new File(samplePath));
			Resource resource = new UrlResource(samplePath);
			
			return new ResponseEntity<>(resource, HttpStatus.OK);
		} catch(Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(samplePath, HttpStatus.OK);
		}
	}
	
	@GetMapping("/pagination/{page}")
	public ResponseEntity<List<Board>> Pagination(@PathVariable("page") int page){
		try {
			List<Board> pageBoard = boardService.pagination(page);
			return new ResponseEntity<>(pageBoard, HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@GetMapping("/totalItem")
	public ResponseEntity<Integer> countTotalBoard() {
		try {
			int totalItem = boardService.countTotalBoard();
			return new ResponseEntity<>(totalItem, HttpStatus.OK);
		} catch(Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@PostMapping("/clickLike")
	public ResponseEntity<Integer> clickLike(@RequestBody Like likeData){
		try {
			int result = boardService.clickLike(likeData);
			return new ResponseEntity<>(result, HttpStatus.OK);
		} catch(Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@PostMapping("/searchLikeCount")
	public ResponseEntity<Integer> searchLikeCount(@RequestBody Like likeData){
		try {
			int result = boardService.searchLikeCount(likeData);
			return new ResponseEntity<>(result, HttpStatus.OK);
		} catch(Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@PutMapping("/addComment")
	public ResponseEntity<String> addComment(@RequestBody Comment comment){
		String result = boardService.addComment(comment);
		if(result.equals("success")){

			return new ResponseEntity<>(result, HttpStatus.OK);
		}else {
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@GetMapping("/findAllComments")
	public ResponseEntity<List<Comment>> findAllComments(@RequestBody Comment comment){
		try {
			List<Comment> result = boardService.findAllComments(comment);
			return new ResponseEntity<>(result, HttpStatus.OK);
		} catch(Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
}
